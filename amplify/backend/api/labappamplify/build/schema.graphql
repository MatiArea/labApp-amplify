type Patient {
  id: ID!
  name: String!
  dni: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Doctor {
  id: ID!
  name: String!
  specialty: String!
  turns(dateType: ModelTurnByDoctorCompositeKeyConditionInput, filter: ModelTurnFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTurnConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Turn {
  id: ID!
  patiendId: ID!
  doctorId: ID!
  patient: Patient
  doctor: Doctor
  date: String!
  type: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPatientConnection {
  items: [Patient]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelPatientFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  dni: ModelIntInput
  and: [ModelPatientFilterInput]
  or: [ModelPatientFilterInput]
  not: ModelPatientFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getPatient(id: ID!): Patient
  listPatients(filter: ModelPatientFilterInput, limit: Int, nextToken: String): ModelPatientConnection
  getDoctor(id: ID!): Doctor
  listDoctors(filter: ModelDoctorFilterInput, limit: Int, nextToken: String): ModelDoctorConnection
  getTurn(id: ID!): Turn
  listTurns(filter: ModelTurnFilterInput, limit: Int, nextToken: String): ModelTurnConnection
}

input CreatePatientInput {
  id: ID
  name: String!
  dni: Int!
}

input UpdatePatientInput {
  id: ID!
  name: String
  dni: Int
}

input DeletePatientInput {
  id: ID
}

type Mutation {
  createPatient(input: CreatePatientInput!, condition: ModelPatientConditionInput): Patient
  updatePatient(input: UpdatePatientInput!, condition: ModelPatientConditionInput): Patient
  deletePatient(input: DeletePatientInput!, condition: ModelPatientConditionInput): Patient
  createDoctor(input: CreateDoctorInput!, condition: ModelDoctorConditionInput): Doctor
  updateDoctor(input: UpdateDoctorInput!, condition: ModelDoctorConditionInput): Doctor
  deleteDoctor(input: DeleteDoctorInput!, condition: ModelDoctorConditionInput): Doctor
  createTurn(input: CreateTurnInput!, condition: ModelTurnConditionInput): Turn
  updateTurn(input: UpdateTurnInput!, condition: ModelTurnConditionInput): Turn
  deleteTurn(input: DeleteTurnInput!, condition: ModelTurnConditionInput): Turn
}

input ModelPatientConditionInput {
  name: ModelStringInput
  dni: ModelIntInput
  and: [ModelPatientConditionInput]
  or: [ModelPatientConditionInput]
  not: ModelPatientConditionInput
}

type Subscription {
  onCreatePatient: Patient @aws_subscribe(mutations: ["createPatient"])
  onUpdatePatient: Patient @aws_subscribe(mutations: ["updatePatient"])
  onDeletePatient: Patient @aws_subscribe(mutations: ["deletePatient"])
  onCreateDoctor: Doctor @aws_subscribe(mutations: ["createDoctor"])
  onUpdateDoctor: Doctor @aws_subscribe(mutations: ["updateDoctor"])
  onDeleteDoctor: Doctor @aws_subscribe(mutations: ["deleteDoctor"])
  onCreateTurn: Turn @aws_subscribe(mutations: ["createTurn"])
  onUpdateTurn: Turn @aws_subscribe(mutations: ["updateTurn"])
  onDeleteTurn: Turn @aws_subscribe(mutations: ["deleteTurn"])
}

type ModelDoctorConnection {
  items: [Doctor]
  nextToken: String
}

input ModelDoctorFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  specialty: ModelStringInput
  and: [ModelDoctorFilterInput]
  or: [ModelDoctorFilterInput]
  not: ModelDoctorFilterInput
}

input CreateDoctorInput {
  id: ID
  name: String!
  specialty: String!
}

input UpdateDoctorInput {
  id: ID!
  name: String
  specialty: String
}

input DeleteDoctorInput {
  id: ID
}

input ModelDoctorConditionInput {
  name: ModelStringInput
  specialty: ModelStringInput
  and: [ModelDoctorConditionInput]
  or: [ModelDoctorConditionInput]
  not: ModelDoctorConditionInput
}

type ModelTurnConnection {
  items: [Turn]
  nextToken: String
}

input ModelTurnFilterInput {
  id: ModelIDInput
  patiendId: ModelIDInput
  doctorId: ModelIDInput
  date: ModelStringInput
  type: ModelStringInput
  and: [ModelTurnFilterInput]
  or: [ModelTurnFilterInput]
  not: ModelTurnFilterInput
}

input CreateTurnInput {
  id: ID
  patiendId: ID!
  doctorId: ID!
  date: String!
  type: String!
}

input UpdateTurnInput {
  id: ID!
  patiendId: ID
  doctorId: ID
  date: String
  type: String
}

input DeleteTurnInput {
  id: ID
}

input ModelTurnConditionInput {
  patiendId: ModelIDInput
  doctorId: ModelIDInput
  date: ModelStringInput
  type: ModelStringInput
  and: [ModelTurnConditionInput]
  or: [ModelTurnConditionInput]
  not: ModelTurnConditionInput
}

input ModelTurnByDoctorCompositeKeyConditionInput {
  eq: ModelTurnByDoctorCompositeKeyInput
  le: ModelTurnByDoctorCompositeKeyInput
  lt: ModelTurnByDoctorCompositeKeyInput
  ge: ModelTurnByDoctorCompositeKeyInput
  gt: ModelTurnByDoctorCompositeKeyInput
  between: [ModelTurnByDoctorCompositeKeyInput]
  beginsWith: ModelTurnByDoctorCompositeKeyInput
}

input ModelTurnByDoctorCompositeKeyInput {
  date: String
  type: String
}
